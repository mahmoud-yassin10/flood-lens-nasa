name: Refresh data every 3h & Deploy Pages

on:
  schedule:
    # Runs at minute 0 every 3 hours (UTC)
    - cron: "0 */3 * * *"
  workflow_dispatch:

permissions:
  contents: write        # commit refreshed data
  pages: write           # deploy to Pages
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  # Edit this to your actual pipeline module / entrypoint
  PYTHON_ENTRY: "python -m pipeline.run_city"
  # Where the site reads JSON from (change to your actual folder)
  OUTPUT_DIR: "public/data"
  # Default city list if cities.txt isn't present (space-separated)
  CITIES: "alexandria cairo khartoum lagos tunis casablanca beirut nairobi mumbai dhaka jakarta manila bangkok karachi ho_chi_minh"

jobs:
  refresh-data:
    name: Build fresh city data
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python deps (if any)
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Ensure output dir exists
        run: |
          mkdir -p "$OUTPUT_DIR"

      - name: Choose city list
        id: cities
        shell: bash
        run: |
          if [ -f cities.txt ]; then
            echo "list=$(tr '\n' ' ' < cities.txt)" >> $GITHUB_OUTPUT
          else
            echo "list=$CITIES" >> $GITHUB_OUTPUT
          fi

      - name: Run pipeline for each city
        shell: bash
        run: |
          set -euo pipefail
          echo "Cities: ${{ steps.cities.outputs.list }}"
          for CITY in ${{ steps.cities.outputs.list }}; do
            echo "=== Running for $CITY ==="
            # Example based on your earlier command:
            # python -m pipeline.run_city --city alexandria --days 3 --write
            $PYTHON_ENTRY --city "$CITY" --days 3 --write
          done

      - name: Move/collect outputs
        shell: bash
        run: |
          # If your pipeline already wrote into $OUTPUT_DIR, you can skip this.
          # Otherwise, copy/move from wherever your pipeline writes (adjust path).
          # Example: mv -f pipeline/output/*.json "$OUTPUT_DIR"/ || true
          echo "Collected refreshed data in $OUTPUT_DIR"

      - name: Commit refreshed data (skip if no changes)
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$OUTPUT_DIR" || true
          if ! git diff --cached --quiet; then
            git commit -m "chore(data): refresh city data [skip ci]"
            git push
          else
            echo "No data changes to commit."
          fi

  build:
    name: Build Vite site
    runs-on: ubuntu-latest
    needs: refresh-data
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install deps
        run: npm ci

      - name: Build
        run: npm run build

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
